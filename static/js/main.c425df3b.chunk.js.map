{"version":3,"sources":["images/cloud.svg","components/CloudImage.js","components/OneDayForecast.js","components/SevenDaysForecast.js","components/Blocks.js","App.js","reportWebVitals.js","index.js"],"names":["CloudImage","className","src","cloud","alt","OneDayForecast","temp","datesToRender","im","icon","SevenDaysForecast","ds","dataSeven","sliderLine","width","height","display","position","left","transition","converter","a","date","Date","toLocaleString","day","month","year","useState","items","slider","useRef","setPrev","setNext","ref","map","style","e","index","dt","weather","Math","ceil","onClick","length","current","childNodes","forEach","Blocks","KEY","cities","wea","setWea","setIcon","dates","setDates","setDataSeven","getWeatherAfter","lat","lon","time","trunc","getTime","fetch","api_url","json","data","datesJSON","temperature","options","Object","values","getWeather7days","api_weather_url","daily","getLatLon","city","onChange","value","changeCitySevenDays","target","placeholder","selected","type","name","console","log","changeCity","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c425df3b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloud.c93ab75c.svg\";","import cloud from '../images/cloud.svg';\r\n\r\n\r\n\r\nfunction CloudImage() {\r\n  return (\r\n        <>\r\n        <img className=\"block__card__image\" src={cloud} alt='cloud_image' />\r\n        <h4 className=\"blocks__card__text\">Fill in all the fields and the weather will be displayed</h4>\r\n        </>\r\n       \r\n  );\r\n}\r\n\r\n\r\nexport default CloudImage;","import '../styles/OneDayForecast/oneDayForecast.css'\r\nimport CloudImage from './CloudImage'\r\n\r\n\r\nfunction OneDayForecast({ temp, datesToRender, icon }) {\r\n\r\n    let im = icon.icon\r\n\r\n    return (\r\n        <>\r\n            {im ? (\r\n                <div className=\"OneDayForecast\">\r\n                    <div className=\"OneDayForecast__data\">{datesToRender}</div>\r\n                    <img className=\"OneDayForecast__image\" src={`http://openweathermap.org/img/wn/${im}@2x.png`} alt='rain_image' />\r\n                    <div></div>\r\n                    <div className=\"OneDayForecast__temperature\">+{temp} C</div>\r\n                </div>\r\n\r\n            ) : (<CloudImage />)\r\n        \r\n        }\r\n       </>\r\n    );\r\n}\r\n\r\n\r\nexport default OneDayForecast;","import '../styles/SevenDaysForecast/sevenDaysForecast.css'\r\nimport CloudImage from './CloudImage'\r\nimport React, { useState, useRef } from 'react'\r\n\r\n\r\n\r\nfunction SevenDaysForecast({ dataSeven }) {\r\n\r\n      let ds = dataSeven.dataSeven\r\n\r\n      let sliderLine = {\r\n            width: '80%',\r\n            height: '200px',\r\n            display: 'flex',\r\n            position: 'relative',\r\n            left: '0px',\r\n            transition: 'all ease 1s',\r\n      }\r\n\r\n\r\n      function converter(a) {\r\n            let options = {\r\n                  day: 'numeric',\r\n                  month: 'numeric',\r\n                  year: 'numeric'\r\n            }\r\n            let date = new Date(a * 1000);\r\n            return <div className=\"slider__card__data\">{date.toLocaleString('ru', options)}</div>\r\n      }\r\n\r\n      const [items, setItems] = useState([1])\r\n\r\n\r\n      const slider = useRef(null)\r\n      const [prev, setPrev] = useState(false)\r\n      const [next, setNext] = useState(false)\r\n\r\n      let position = 0;\r\n\r\n      const prevHandler = () => {\r\n            if (position === 0) {\r\n                  setPrev(true)\r\n            } else {\r\n                  position += 300\r\n                  setPrev(false)\r\n                  slider.current.childNodes.forEach((e) => {\r\n                        e.style = `transform: translateX(${position}px)`\r\n                  })\r\n            }\r\n      }\r\n\r\n\r\n      const nextHandler = () => {\r\n            if (position === -(items.length - 6) * 100 + 100) {\r\n                  setNext(true)\r\n                  setPrev(false)\r\n            } else {\r\n                  setPrev(false)\r\n                  position -= 300\r\n                  slider.current.childNodes.forEach((e) => {\r\n                        e.style = `transform: translateX(${position}px)`\r\n                  })\r\n            }\r\n\r\n      }\r\n\r\n      return (\r\n\r\n            <>\r\n                  {  ds ? (\r\n                        <div className='sliders'>\r\n                              <div className='slider_track' ref={slider}>\r\n                                    {items.map(() => {\r\n                                          return (\r\n                                                <div className='slider__item'>\r\n\r\n                                                      <div style={sliderLine} >\r\n                                                            {\r\n                                                                  ds && ds.map((e, index) =>\r\n                                                                        <div className=\"slider__card\" key={index}>\r\n                                                                              {converter(e.dt)}\r\n                                                                              <img className=\"slider__card__image\" src={`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`} alt='rain_image' />\r\n                                                                              <div className=\"slider__card__temperature\">{Math.ceil(e.temp.day)}&deg; C</div>\r\n                                                                        </div>)\r\n                                                            }\r\n                                                      </div>\r\n\r\n\r\n                                                </div>\r\n                                          )\r\n                                    })}\r\n                              </div>\r\n                              <button className='slider__button_prev' onClick={nextHandler}>next</button>\r\n                              <button className='slider__button_next' onClick={prevHandler}>prev</button>\r\n\r\n\r\n\r\n                        </div>\r\n\r\n\r\n                  ) : (\r\n                        <CloudImage />\r\n                  )\r\n\r\n                  }\r\n            </>\r\n      );\r\n}\r\n\r\n\r\nexport default SevenDaysForecast;","\r\nimport { React, useState } from 'react'\r\n\r\n\r\nimport OneDayForecast from './OneDayForecast.js'\r\nimport SevenDaysForecast from './SevenDaysForecast'\r\n\r\n\r\n\r\nfunction Blocks() {\r\n\r\n\r\n  const KEY = '4ca8521531042afe2d4080affc6fb41e'\r\n\r\n  const cities = {\r\n    'Самара': [53.195873, 50.100193],\r\n    'Тольятти': [53.507836, 49.420393],\r\n    'Саратов': [51.533557, 46.034257],\r\n    'Казань': [55.796127, 49.106405],\r\n    'Краснодар': [45.035470, 38.975313],\r\n  }\r\n\r\n\r\n  const [wea, setWea] = useState([]) //из прошлого\r\n  const [icon, setIcon] = useState([])\r\n  const [dates, setDates] = useState([])\r\n\r\n\r\n  const [dataSeven, setDataSeven] = useState([])\r\n\r\n\r\n\r\n\r\n  const getWeatherAfter = async (lat, lon) => {\r\n\r\n \r\n    let time = Math.trunc(new Date().getTime() / 1000);  //округление\r\n\r\n\r\n    const api_url = await\r\n      fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${time}&units=metric&appid=${KEY}`)  //из прошлого\r\n    const data = await api_url.json()\r\n\r\n\r\n    let datesJSON = data.current.dt\r\n    let icon = data.current.weather[0].icon\r\n    let temperature = Math.ceil(data.current.temp)\r\n    setWea({ temperature })\r\n    setIcon({ icon })\r\n\r\n    //преобразование даты\r\n\r\n    let options = {\r\n      day: 'numeric',\r\n      month: 'numeric',\r\n      year: 'numeric'\r\n    }\r\n    let date = new Date(datesJSON * 1000);\r\n    let dates = date.toLocaleString('ru', options)\r\n    setDates({ dates })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  let temp = Object.values(wea)\r\n  let datesToRender = Object.values(dates)\r\n\r\n  const getWeather7days = async (lat, lon) => {\r\n\r\n    const api_weather_url = await\r\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=current&units=metric&appid=${KEY}`)  //7 дней\r\n\r\n    const data = await api_weather_url.json()\r\n\r\n    let dataSeven = data.daily\r\n    setDataSeven({ dataSeven })\r\n\r\n\r\n  }\r\n\r\n  const getLatLon = (city) => cities[city] ?? [];\r\n\r\n  const changeCitySevenDays = (value) => {\r\n    const [lat, lon] = getLatLon(value);\r\n    getWeather7days(lat, lon);\r\n  }\r\n\r\n\r\n  const changeCity = (value) => {\r\n    console.log(value)\r\n    const [lat, lon] = getLatLon(value);\r\n    getWeatherAfter(lat, lon);\r\n  }\r\n\r\n  const changeDate = (value) => {\r\n    //let date = new Date(value)\r\n    //console.log(date.getDate()+'.'+(date.getMonth()+1+'.' +date.getFullYear()));\r\n    //console.log(value) //2021-05-16\r\n\r\n\r\n\r\n    //getWeatherAfter(value2);\r\n  }\r\n\r\n  return (\r\n    <div className=\"blocks\">\r\n\r\n      <div className=\"blocks__card\">\r\n        <h1 className=\"blocks__card__header\">7 Days Forecast</h1>\r\n        <div className=\"blocks__card__inputs\">\r\n\r\n\r\n          <select className=\"blocks__card__select\" onChange={e => changeCitySevenDays(e.target.value)} placeholder=\"Select City\" selected>\r\n            <option type=\"text\" name=\"city\" value=\"Самара\">Самара</option>\r\n            <option type=\"text\" name=\"city\" value=\"Тольятти\">Тольятти</option>\r\n            <option type=\"text\" name=\"city\" value=\"Саратов\">Саратов</option>\r\n            <option type=\"text\" name=\"city\" value=\"Казань\">Казань</option>\r\n            <option type=\"text\" name=\"city\" value=\"Краснодар\">Краснодар</option>\r\n          </select>\r\n        </div>\r\n        < SevenDaysForecast dataSeven={dataSeven} />\r\n\r\n      </div>\r\n\r\n\r\n      <div className=\"blocks__card\">\r\n        <h1 className=\"blocks__card__header\">Forecast for a Date in the Past</h1>\r\n        <div className=\"blocks__card__inputs\">\r\n          <select className=\"blocks__card__select\" onChange={e => changeCity(e.target.value)} placeholder=\"Select City\">\r\n            <option>Самара</option>\r\n            <option>Тольятти</option>\r\n            <option>Саратов</option>\r\n            <option>Казань</option>\r\n            <option>Краснодар</option>\r\n          </select>\r\n          <input className=\"blocks__card__select\" type=\"date\" onChange={e => changeDate(e.target.value)}>\r\n\r\n\r\n          </input>\r\n        </div>\r\n        < OneDayForecast temp={temp} datesToRender={datesToRender} icon={icon} />\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Blocks;","import Block from './components/Blocks'\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"wrapper\">\r\n        <div className=\"headline\">\r\n          <h1 className=\"headline__text\">Weather</h1>\r\n          <h1 className=\"headline__text headline__text_right\">forecast</h1>\r\n        </div>\r\n        <Block />\r\n\r\n        <footer className=\"footer\">\r\n          <h4 className=\"footer__text\">C ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT</h4>\r\n        </footer>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}