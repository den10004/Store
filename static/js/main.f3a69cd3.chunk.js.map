{"version":3,"sources":["images/cloud.svg","components/CloudImage.tsx","components/OneDayForecast.tsx","components/SevenDaysForecast.js","components/Blocks.js","App.tsx","reportWebVitals.js","index.js"],"names":["CloudImage","className","src","cloud","alt","OneDayForecast","temp","datesToRender","icon","im","SevenDaysForecast","ds","dataSeven","converter","a","date","Date","toLocaleString","day","month","year","slider","useRef","useState","setPrev","setNext","position","ref","map","e","index","dt","weather","Math","ceil","onClick","current","childNodes","forEach","style","Blocks","KEY","cities","dataDefault","trunc","getTime","wea","setWea","setIcon","dates","setDates","lat","setLat","lon","setLon","time","setTime","Object","values","setTemp","setDatesToRender","setDataSeven","getWeatherAfter","fetch","api_url","json","data","status","datesJSON","temperature","options","String","getWeather7days","api_weather_url","daily","getLatLon","city","useEffect","console","log","onChange","value","changeCitySevenDays","target","selected","disabled","type","name","changeCity","dateTo","getMonth","getDate","getFullYear","parse","changeDate","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3a69cd3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloud.c93ab75c.svg\";","import cloud from '../images/cloud.svg';\r\n\r\n\r\n\r\nfunction CloudImage() {\r\n  return (\r\n        <>\r\n        <img className=\"block__card__image\" src={cloud} alt='cloud_image' />\r\n        <h4 className=\"blocks__card__text\">Fill in all the fields and the weather will be displayed</h4>\r\n        </>\r\n       \r\n  );\r\n}\r\n\r\n\r\nexport default CloudImage;","import '../styles/OneDayForecast/oneDayForecast.css'\r\nimport CloudImage from './CloudImage'\r\n/*\r\ninterface OneDay {\r\n    temp: number;\r\n    datesToRender: any;\r\n    icon: any;\r\n}*/\r\n\r\n\r\nimport { FC } from 'react';\r\n\r\nexport type OwnODFProps = {\r\n  temp?: number[]|unknown[];\r\n  datesToRender?: string[]|unknown[];\r\n  icon?: any;\r\n}\r\n\r\nexport type ODFProps = FC<OwnODFProps>;\r\n\r\n\r\nconst OneDayForecast:ODFProps = ({temp, datesToRender, icon})=> {\r\n\r\n    let im: any = icon?.icon || ''\r\n\r\n\r\n    return (\r\n        <>\r\n           {im ? (\r\n                <div className=\"OneDayForecast\">\r\n                    <div className=\"OneDayForecast__data\">{datesToRender}</div>\r\n                    <img className=\"OneDayForecast__image\" src={`http://openweathermap.org/img/wn/${im}@2x.png`} alt='rain_image' />\r\n                    <div className=\"OneDayForecast__temperature\">+{temp} C</div>\r\n                </div>\r\n\r\n            ) : (<CloudImage />)\r\n\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default OneDayForecast;\r\n","import '../styles/SevenDaysForecast/sevenDaysForecast.css'\r\nimport CloudImage from './CloudImage'\r\nimport React, { useState, useRef } from 'react'\r\n\r\n\r\n\r\n\r\nfunction SevenDaysForecast({ dataSeven }) {\r\n\r\n      let ds = dataSeven.dataSeven\r\n\r\n      function converter(a) {\r\n            let options = {\r\n                  day: 'numeric',\r\n                  month: 'numeric',\r\n                  year: 'numeric'\r\n            }\r\n            let date = new Date(a * 1000);\r\n            return <div className=\"slider__card__data\">{date.toLocaleString('ru', options)}</div>\r\n      }\r\n\r\n      const slider = useRef(null)\r\n      // eslint-disable-next-line\r\n      const [prev, setPrev] = useState(false) \r\n      // eslint-disable-next-line\r\n      const [next, setNext] = useState(false) \r\n\r\n      let position = 0;\r\n\r\n      const prevHandler = () => {\r\n            if (position === 0) {\r\n                  setPrev(true)\r\n            } else {\r\n                  position += 300\r\n                  setPrev(false)\r\n                  slider.current.childNodes.forEach((e) => {\r\n                        e.style = `transform: translateX(${position}px)`\r\n                  })\r\n            }\r\n      }\r\n\r\n\r\n      const nextHandler = () => {\r\n            if (position === -900) {\r\n                  setNext(true)\r\n                  setPrev(false)\r\n            } else {\r\n                  setPrev(false)\r\n                  position -= 300\r\n                  slider.current.childNodes.forEach((e) => {\r\n                        e.style = `transform: translateX(${position}px)`\r\n                  })              \r\n            }\r\n      }\r\n\r\n \r\n      return (\r\n            <>\r\n                  {  ds ? (\r\n                        <div className='slider'>\r\n                              <div className='slider_track' ref={slider}>\r\n                                    <div className='slider__item'>\r\n                                          <div className='slider-line'>\r\n                                                {\r\n                                                      ds && ds.map((e, index) =>\r\n                                                            <div className=\"slider__card\" key={index}>\r\n                                                                  {converter(e.dt)}\r\n                                                                  <img className=\"slider__card__image\" src={`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`} alt='rain_image' />\r\n                                                                  <div className=\"slider__card__temperature\">{Math.ceil(e.temp.day)}&deg; C</div>\r\n                                                            </div>)\r\n                                                }\r\n                                          </div>\r\n\r\n\r\n                                    </div>\r\n\r\n                              </div>\r\n                              <button className='slider__button_next' onClick={nextHandler}></button>\r\n                              <button className='slider__button_prev' onClick={prevHandler}></button>\r\n                        </div>\r\n                  ) : (\r\n                        <CloudImage />\r\n                  )\r\n                  }\r\n            </>\r\n      );\r\n}\r\n\r\n\r\n\r\n\r\nexport default SevenDaysForecast;\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport {React, useEffect, useState} from 'react';\r\n\r\nimport OneDayForecast from './OneDayForecast'\r\nimport SevenDaysForecast from './SevenDaysForecast'\r\n\r\n\r\n\r\nfunction Blocks() {\r\n\r\n\r\n  const KEY = '4ca8521531042afe2d4080affc6fb41e'\r\n\r\n  const cities = {\r\n    'Самара': [53.195873, 50.100193],\r\n    'Тольятти': [53.507836, 49.420393],\r\n    'Саратов': [51.533557, 46.034257],\r\n    'Казань': [55.796127, 49.106405],\r\n    'Краснодар': [45.035470, 38.975313],\r\n  }\r\n\r\n\r\n    let dataDefault = Math.trunc(new Date().getTime() / 1000);\r\n  const [wea, setWea] = useState([]) //из прошлого\r\n  const [icon, setIcon] = useState([])\r\n  const [dates, setDates] = useState([])\r\n  const [lat, setLat] = useState(45.035470)\r\n  const [lon, setLon] = useState(38.975313)\r\n  const [time, setTime] = useState(dataDefault)\r\n\r\n\r\n    const [temp,setTemp] = useState(Object.values(wea))\r\n    const [datesToRender,setDatesToRender] = useState(Object.values(dates))\r\n\r\n\r\n  const [dataSeven, setDataSeven] = useState([])\r\n\r\n\r\n\r\n\r\n  const getWeatherAfter = async () => {\r\n\r\n    const api_url = await\r\n      fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${time}&units=metric&appid=${KEY}`)  //из прошлого\r\n    const data = await api_url.json()\r\n\r\n    if(api_url.status >= 400 ) {\r\n\r\n      // валидация\r\n      return\r\n    }\r\n\r\n       let datesJSON = data.current.dt\r\n    let icon = data.current.weather[0].icon\r\n    let temperature = Math.ceil(data.current.temp)\r\n    setWea({ temperature })\r\n    setIcon({ icon })\r\n\r\n\r\n    //преобразование даты\r\n\r\n    let options = {\r\n      day: 'numeric',\r\n      month: 'numeric',\r\n      year: 'numeric'\r\n    }\r\n    let date = new Date(datesJSON * 1000);\r\n    let dates = date.toLocaleString('ru', options)\r\n    setDates({ dates: String(dates) })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  const getWeather7days = async (lat, lon) => {\r\n    const api_weather_url = await\r\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=current&units=metric&appid=${KEY}`)  //7 дней\r\n    const data = await api_weather_url.json()\r\n    let dataSeven = data.daily\r\n    setDataSeven({ dataSeven })\r\n  }\r\n\r\n\r\n  const getLatLon = (city) => cities[city] ?? [];\r\n\r\n\r\n  const changeCitySevenDays = (value) => {\r\n    const [lat, lon] = getLatLon(value);\r\n    getWeather7days(lat, lon);\r\n  }\r\n\r\n\r\n  const changeCity = (value) => {\r\n    const [lat, lon] = getLatLon(value);\r\n      setLat(lat)\r\n      setLon(lon)\r\n\r\n  }\r\n\r\n  const changeDate = (value) => {\r\n    let date = new Date(value)\r\n    let dateTo = date.getMonth() + 1 + '/' + date.getDate('') + '/' + date.getFullYear('')\r\n    let time = (Date.parse(dateTo)) / 1000\r\n    // console.log(time)\r\n      setTime(time)\r\n\r\n  }\r\n\r\n  useEffect(()=> {\r\n      console.log(wea,'wea')\r\n      setTemp([...Object.values(wea)])\r\n  },[wea])\r\n\r\n    useEffect(()=> {\r\n        console.log(dates,'dates')\r\n        setDatesToRender([...Object.values(dates)])\r\n    },[dates])\r\n\r\n    useEffect(()=> {\r\n      getWeatherAfter();\r\n    }, [lon,lat,time])\r\n\r\n    return (\r\n    <div className=\"blocks\">\r\n\r\n      <div className=\"blocks__card\">\r\n        <h1 className=\"blocks__card__header\">7 Days Forecast</h1>\r\n        <div className=\"blocks__card__inputs\">\r\n\r\n\r\n          <select className=\"blocks__card__select\" onChange={e => changeCitySevenDays(e.target.value)}>\r\n            <option selected disabled>Select City</option>\r\n            <option type=\"text\" name=\"city\" value=\"Самара\">Самара</option>\r\n            <option type=\"text\" name=\"city\" value=\"Тольятти\">Тольятти</option>\r\n            <option type=\"text\" name=\"city\" value=\"Саратов\">Саратов</option>\r\n            <option type=\"text\" name=\"city\" value=\"Казань\">Казань</option>\r\n            <option type=\"text\" name=\"city\" value=\"Краснодар\">Краснодар</option>\r\n          </select>\r\n        </div>\r\n        < SevenDaysForecast dataSeven={dataSeven} />\r\n\r\n      </div>\r\n\r\n\r\n      <div className=\"blocks__card\">\r\n        <h1 className=\"blocks__card__header\">Forecast for a Date in the Past</h1>\r\n        <div className=\"blocks__card__inputs\">\r\n          <select className=\"blocks__card__select\" onChange={e => changeCity(e.target.value)}>\r\n            <option selected disabled>Select City</option>\r\n              <option type=\"text\" name=\"city\" value=\"Самара\">Самара</option>\r\n              <option type=\"text\" name=\"city\" value=\"Тольятти\">Тольятти</option>\r\n              <option type=\"text\" name=\"city\" value=\"Саратов\">Саратов</option>\r\n              <option type=\"text\" name=\"city\" value=\"Казань\">Казань</option>\r\n              <option type=\"text\" name=\"city\" value=\"Краснодар\">Краснодар</option>\r\n          </select>\r\n          <input className=\"blocks__card__select\" type=\"date\" onChange={e => changeDate(e.target.value)}>\r\n            { /* <input className=\"blocks__card__select\" type=\"date\" onChange={e => changeCity(e.target.value)}>    */}\r\n\r\n          </input>\r\n        </div>\r\n        < OneDayForecast temp={temp} datesToRender={datesToRender} icon={icon} />\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Blocks;\r\n","import React from 'react';\r\nimport Block from './components/Blocks'\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"wrapper\">\r\n        <div className=\"headline\">\r\n          <h1 className=\"headline__text\">Weather</h1>\r\n          <h1 className=\"headline__text headline__text_right\">forecast</h1>\r\n        </div>\r\n        <Block />\r\n\r\n        <footer className=\"footer\">\r\n          <h4 className=\"footer__text\">C ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT</h4>\r\n        </footer>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}