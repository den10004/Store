{"version":3,"sources":["images/cloud.svg","components/CloudImage.tsx","components/OneDayForecast.tsx","components/SevenDaysForecast.tsx","components/Blocks.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CloudImage","className","src","cloud","alt","OneDayForecast","temp","datesToRender","icon","im","style","margin","paddingTop","SevenDaysForecast","dataSeven","ds","converter","a","date","Date","toLocaleString","day","month","year","useState","slider","useRef","setPrev","setNext","position","ref","map","e","index","dt","weather","Math","ceil","onClick","current","childNodes","forEach","Blocks","KEY","cities","wea","setWea","setIcon","dates","setDates","lat","setLat","lon","setLon","time","setTime","setDataSeven","setTemp","setDatesToRender","getWeatherAfter","fetch","api_url","json","data","status","datesJSON","temperature","options","getWeather7days","api_weather_url","daily","getLatLon","city","useEffect","Object","values","onChange","value","changeCitySevenDays","target","selected","disabled","changeCity","type","dateTo","getMonth","getDate","getFullYear","parse","changeDate","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5612cca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloud.c93ab75c.svg\";","import cloud from '../images/cloud.svg';\r\n\r\n\r\n\r\nfunction CloudImage() {\r\n  return (\r\n        <>\r\n        <img className=\"block__card__image\" src={cloud} alt='cloud_image' />\r\n        <h4 className=\"blocks__card__text\">Fill in all the fields and the weather will be displayed</h4>\r\n        </>\r\n       \r\n  );\r\n}\r\n\r\n\r\nexport default CloudImage;","import '../styles/OneDayForecast/oneDayForecast.css'\r\nimport CloudImage from './CloudImage'\r\nimport { FC } from 'react';\r\n\r\nexport type OwnODFProps = {\r\n    temp?: number[] | unknown[];\r\n    datesToRender?: string[] | unknown[];\r\n    icon?: any;\r\n}\r\n\r\nexport type ODFProps = FC<OwnODFProps>;\r\n\r\n\r\nconst OneDayForecast: ODFProps = ({ temp, datesToRender, icon }) => {\r\n\r\n    let im: any = icon?.icon || ''\r\n\r\n    return (\r\n        <>\r\n            {im ? (\r\n                <div className=\"OneDayForecast\">\r\n                    <div className=\"OneDayForecast__data\">{datesToRender}</div>\r\n                    <img className=\"OneDayForecast__image\" src={`http://openweathermap.org/img/wn/${im}@2x.png`} alt='rain_image' />\r\n                    <div className=\"OneDayForecast__temperature\">+{temp}&deg; C</div>\r\n                </div>\r\n\r\n            ) : (<>\r\n                <h2 style={{margin: '0 auto', paddingTop: '10px'}}>Выберите город и дату за 1- 5 дней</h2>\r\n                <CloudImage />\r\n                </>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default OneDayForecast;\r\n","import React, { useState, useRef } from 'react';\r\nimport '../styles/SevenDaysForecast/sevenDaysForecast.css'\r\nimport CloudImage from './CloudImage'\r\nimport { FC } from 'react';\r\n\r\nexport type OwnODFProps = {\r\n       dataSeven?: any;\r\n  }\r\n  \r\n  export type ODFProps = FC<OwnODFProps>;\r\n\r\nconst SevenDaysForecast: ODFProps = (dataSeven: any ) => {\r\n  \r\n     let ds:any = dataSeven.dataSeven.dataSeven\r\n\r\n\r\n\r\n      function converter(a: number) {\r\n            let options: object = {\r\n                  day: 'numeric',\r\n                  month: 'numeric',\r\n                  year: 'numeric'\r\n            }\r\n            let date = new Date(a * 1000);\r\n            return <div className=\"slider__card__data\">{date.toLocaleString('ru', options)}</div>\r\n      }\r\n\r\n\r\n      // eslint-disable-next-line\r\n      const [items, setItems] = useState<any>([1])\r\n      const slider = useRef<any>(null)\r\n       // eslint-disable-next-line\r\n      const [prev, setPrev] = useState<any>(false)\r\n       // eslint-disable-next-line\r\n      const [next, setNext] = useState<any>(false)\r\n\r\n      let position = 0;\r\n\r\n      const prevHandler = () => {\r\n            if (position === 0) {\r\n                  setPrev(true)\r\n            } else {\r\n                  position += 300\r\n                  setPrev(false)\r\n                  slider.current.childNodes.forEach((e: any) => {\r\n                        e.style = `transform: translateX(${position}px)`\r\n                  })\r\n            }\r\n      }\r\n\r\n\r\n      const nextHandler = () => {\r\n            if (position === -900) {\r\n                  setNext(true)\r\n                  setPrev(false)\r\n            } else {\r\n                  setPrev(false)\r\n                  position -= 300\r\n                  slider.current.childNodes.forEach((e: any) => {\r\n                        e.style = `transform: translateX(${position}px)`\r\n                  })              \r\n            }\r\n      }\r\n\r\n      return (\r\n            <>\r\n                  {  ds ? (\r\n                        <div className='slider'>\r\n                              <div className='slider_track' ref={slider}>\r\n                                    <div className='slider__item'>\r\n                                          <div className='slider-line'>\r\n                                                {\r\n                                                      ds && ds.map((e: any, index: any) =>\r\n                                          \r\n                                                            <div className=\"slider__card\" key={index}>\r\n                                                                  {converter(e.dt)}\r\n                                                                  <img className=\"slider__card__image\" src={`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`} alt='rain_image' />\r\n                                                                  <div className=\"slider__card__temperature\">{Math.ceil(e.temp.day)}&deg; C</div>\r\n                                                            </div>)\r\n                                                 }\r\n                                          </div>\r\n\r\n\r\n                                    </div>\r\n\r\n                              </div>\r\n                              <button className='slider__button_next' onClick={nextHandler}></button>\r\n                              <button className='slider__button_prev' onClick={prevHandler}></button>\r\n                        </div>\r\n                  ) : (\r\n                        <CloudImage />\r\n                  )\r\n              \r\n                  }\r\n            </>\r\n      );\r\n}\r\n\r\n\r\n\r\n\r\nexport default SevenDaysForecast;\r\n\r\n\r\n\r\n\r\n\r\n","import {useEffect, useState} from 'react'\r\nimport OneDayForecast from './OneDayForecast'\r\nimport SevenDaysForecast from './SevenDaysForecast'\r\n\r\n\r\n\r\nfunction Blocks() {\r\n  const KEY: string = '4ca8521531042afe2d4080affc6fb41e'\r\n\r\n  interface ICities {\r\n    [key: string]: [number,number]\r\n  }\r\n\r\n  interface IWea {\r\n    [key: string]: number\r\n  }\r\n  interface IDates {\r\n    [key: string]: string\r\n  }\r\n\r\n  const cities: ICities = {\r\n    'Самара': [53.195873, 50.100193],\r\n    'Тольятти': [53.507836, 49.420393],\r\n    'Саратов': [51.533557, 46.034257],\r\n    'Казань': [55.796127, 49.106405],\r\n    'Краснодар': [45.035470, 38.975313],\r\n  }\r\n\r\n  //let dataDefault = Math.trunc(new Date().getTime() / 1000);\r\n  const [wea, setWea] = useState<IWea>({}) //из прошлого\r\n  const [icon, setIcon] = useState<any>()\r\n  const [dates, setDates] = useState<any>({})\r\n  const [lat, setLat] = useState(45.035470)\r\n  const [lon, setLon] = useState(38.975313)\r\n  const [time, setTime] = useState([])\r\n\r\n  const [dataSeven, setDataSeven] = useState<any>([])\r\n  const [temp,setTemp] = useState<number[]>([])\r\n  const [datesToRender,setDatesToRender] = useState<string[]>([])\r\n\r\n\r\n\r\n  const getWeatherAfter = async () => {\r\n\r\n      const api_url = await\r\n          fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${time}&units=metric&appid=${KEY}`)  //из прошлого\r\n      const data = await api_url.json()\r\n\r\n    if(api_url.status >= 400 ) {\r\n      setDatesToRender([])\r\n      setTemp([])\r\n      setIcon([])\r\n      return\r\n    }\r\n\r\n\r\n\r\n    let datesJSON: any = data.current.dt\r\n    let icon: any = data.current.weather[0].icon\r\n    let temperature: number  = Math.ceil(data.current.temp)\r\n\r\n    setWea({ temperature})\r\n    setIcon({ icon })\r\n\r\n    //преобразование даты\r\n\r\n    let options: object = {\r\n      day: 'numeric',\r\n      month: 'numeric',\r\n      year: 'numeric'\r\n    }\r\n    let date = new Date(datesJSON * 1000);\r\n    let dates = date.toLocaleString('ru', options)\r\n    setDates({ dates })\r\n  }\r\n\r\n  const getWeather7days = async (lat:number, lon:number) => {\r\n    const api_weather_url = await\r\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=current&units=metric&appid=${KEY}`)  //7 дней\r\n    const data = await api_weather_url.json()\r\n\r\n    if(api_weather_url.status >= 400 ) {\r\n      return\r\n    }\r\n    \r\n    let dataSeven = data.daily\r\n    setDataSeven({ dataSeven })\r\n\r\n\r\n  }\r\n\r\n  const getLatLon = (city: string) => cities[city] ?? [];\r\n\r\n  const changeCitySevenDays = (value:any) => {\r\n    const [lat, lon]:any = getLatLon(value);\r\n    getWeather7days(lat, lon);\r\n  }\r\n\r\n\r\n  const changeCity = (value:any) => {\r\n    const [lat, lon] = getLatLon(value);\r\n    setLat(lat)\r\n    setLon(lon)\r\n  }\r\n\r\n  const changeDate = (value:any) => {\r\n    let date = new Date(value)\r\n    let dateTo = date.getMonth() + 1 + '/' + date.getDate() + '/' + date.getFullYear()\r\n    let time: any = (((Date.parse(dateTo)) / 1000) + 43200) \r\n    setTime(time)\r\n  }\r\n\r\n  useEffect(()=> {\r\n    setTemp([...Object.values(wea as IWea)])\r\n  },[wea])\r\n\r\n\r\n  useEffect(()=> {\r\n     setDatesToRender([...Object.values(dates as IDates)])\r\n  },[dates])\r\n\r\n  useEffect(()=> {\r\n    getWeatherAfter();\r\n          // eslint-disable-next-line\r\n  }, [lon,lat,time])   \r\n\r\n  return (\r\n    <div className=\"blocks\">\r\n\r\n      <div className=\"blocks__card\">\r\n        <h1 className=\"blocks__card__header\">7 Days Forecast</h1>\r\n        <div className=\"blocks__card__inputs\">\r\n\r\n\r\n          <select className=\"blocks__card__select\" onChange={e => changeCitySevenDays(e.target.value)}>\r\n          <option selected disabled>Select City</option>\r\n            <option value=\"Самара\">Самара</option>\r\n            <option value=\"Тольятти\">Тольятти</option>\r\n            <option value=\"Саратов\">Саратов</option>\r\n            <option value=\"Казань\">Казань</option>\r\n            <option value=\"Краснодар\">Краснодар</option>\r\n          </select>\r\n        </div>\r\n        < SevenDaysForecast dataSeven={dataSeven} />\r\n\r\n      </div>\r\n\r\n\r\n      <div className=\"blocks__card\">\r\n        <h1 className=\"blocks__card__header\">Forecast for a Date in the Past</h1>\r\n        <div className=\"blocks__card__inputs\">\r\n          <select className=\"blocks__card__select\" onChange={e => changeCity(e.target.value)}>\r\n          <option selected disabled>Select City</option>\r\n            <option value=\"Самара\">Самара</option>\r\n            <option value=\"Тольятти\">Тольятти</option>\r\n            <option value=\"Саратов\">Саратов</option>\r\n            <option value=\"Казань\">Казань</option>\r\n            <option value=\"Краснодар\">Краснодар</option>\r\n          </select>\r\n          <input className=\"blocks__card__select\" type=\"date\" onChange={e => changeDate(e.target.value)}>\r\n\r\n\r\n          </input>\r\n        </div>\r\n        < OneDayForecast temp={temp} datesToRender={datesToRender} icon={icon} />\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Blocks;\r\n","import React from 'react';\r\nimport Block from './components/Blocks'\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"wrapper\">\r\n        <div className=\"headline\">\r\n          <h1 className=\"headline__text\">Weather</h1>\r\n          <h1 className=\"headline__text headline__text_right\">forecast</h1>\r\n        </div>\r\n        <Block />\r\n\r\n        <footer className=\"footer\">\r\n          <h4 className=\"footer__text\">C ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT</h4>\r\n        </footer>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}